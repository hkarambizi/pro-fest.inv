<!DOCTYPE html>
<html>
  <head>
    <title>Fifo</title>
    <%= csrf_meta_tags %>

    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>

    <%= javascript_include_tag 'application' %>


    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Roboto+Mono&display=swap" rel="stylesheet">

<style>
html {
  background: no-repeat center center fixed;
  -webkit-background-size: cover;
  moz-background-size: cover;
  -o-background-size: cover;
  background-size: cover;
  }

/* Items images list view*/
td img {
  max-height: 10em;
  }

/*Container div for feed logo*/
#feed-icon {
    position: relative;
    top: -1.5em;
    left: 45%;
    max-width: 10em;
    text-align: center;
    font-weight: bold;
    max-height: 10em;
    padding: 1em;
    border-radius: 5px;
}

/*feed logo*/
#walkie-icon {
  height: 100%;
  width: 100%;
  z-index: 1;
  }

#map {
/* Set up proportionate scaling */
  width: 75vw;
  height: 100vh;
/* Set up positioning */
  }

.logo {
  width: 12em;
}

.modal-content {
  margin: 2em auto;
  max-width: 60%;
}
  </style>

  </head>
    <body>
      <div class="row">
        <div class = "nav-wrapper">
        <div class="col s3 columnbgrnd" style="height: 100vh;" >
        <div class="center">
          <%= image_tag('fifo-logo-white.png', :class => "logo") %>
          </div>
          <div class="center">
          <a id="nav-map" class="map-toggle center zwaves-effect waves-light btn"><i class="material-icons right">map</i>map</a>
          </div>
          <ul>
    <% if user_signed_in? %>

            <li class="waves-effect waves-light sideLinks">
              <%= link_to 'Home', root_path, class: 'btn menu-button'%>
            </li>
            <% if current_user.permission_level? %>
            <li class="waves-effect waves-light sideLinks">
            <%= link_to "Products", account_products_path(account_id: current_user.account_id), class: 'btn menu-button' %>
            </li>
            <% end %>
            <li class="waves-effect waves-light sideLinks">
              <%= link_to 'Edit Profile', edit_user_registration_path, target: '_self', class: 'btn menu-button' %>
            </li>
            <li class="waves-effect waves-light sideLinks Events">
              <%= link_to 'Events', account_events_path(account_id: current_user.account_id), id: 'modal-trigger', class: 'btn menu-button'  %>
            </li>
          <li class="waves-effect waves-light sideLinks  signout">
            <%= link_to 'Sign out', destroy_user_session_path, method: 'delete', target: '_self', class: 'btn menu-button' %>
          </li>
          <% else %>
            <li class="waves-effect waves-light sideLinks  signup">
            <%= link_to 'Sign Up' , new_user_registration_path, class: 'btn menu-button' %>
            </li>
            <li class="waves-effect waves-light sideLinks  signin">
            <%= link_to 'Sign In' ,  new_user_session_path, class: 'btn menu-button' %>
            </li>

            <% end %>




        </ul>
          <div class="footer">

            <section id="footer">
              <ul class="icons text-muted">
                <p>The FiFo Team:</p>
                <li class="center">
                  <a href="https://github.com/hkarambizi" class=""><i class="fa fa-github" aria-hidden="true"></i>
                    <span class="label">Harry Karambizi
                    </span>
                  </a>
                </li>

                <li class="center">
                  <a href="https://github.com/mtorres23" class=""><i class="fa fa-github" aria-hidden="true"></i>
                    <span class="label">Michael Torres</span>
                  </a>
                </li>
                <li class="center">
                  <a href="https://github.com/ddmilo" class=""><i class="fa fa-github" aria-hidden="true"></i>
                    <span class="label">Dan Milo</span>
                  </a>
                </li>
              </ul>
                <p class="copyright text-muted">&copy; FiFo 2017</p>


          </section>
      </div>
      </div>
    </div> <!--bottom of nav wrapper-->

        <!--view port-->
      <div class="col s9" style="height: 100vh;">
        <% if notice %>
             <p class="alert alert-success"><%= notice %></p>
        <% end %>
        <% if alert %>
            <p class="alert alert-danger"><%= alert %></p>
        <% end %>

        <div id="map"></div> <!--map end-->




    <!-- Modal 1 -->
    <div id="modal1" class="modal bottom-sheet">
      <div class="modal-header">
          <a class="modal-action modal-close waves-effect waves-green btn"><i class="material-icons">map</i></a>
      </div>
      <div class="modal-content">
        <%= yield %>
      </div>

    </div> <!--bottom of modal1-->



    <!--modal2-->
    <div id="modal2" class="modal bottom-sheet">
      <div class="modal-header">
        <a href="#" class="modal-action modal-close waves-effect waves-green btn-flat">Modal Header</a>
      </div>
      <div class="modal-content">
      </div>

    </div> <!--bottom of modal2-->

  </div><!--bottom of viewport-->
</div><!--end of col row-->


<div id="form" class="hidden">
      <table>
      <tr><td>Location Title:</td> <td><input type='text' id='title'/> </td> </tr>
      <tr><td>Type:</td> <td><select id='type'> +
         <option disabled selected value> -- select a type -- </option>
        <option value='bar' SELECTED>bar</option>
         <option value='storage'>storage</option>
         </select> </td></tr>
         <tr><td></td><td><input id='location-submit' type='button' value='Save'/></td>
          <tr><td></td><td><input id='save-location-exit' type='button' value='Save & Exit'/></td></tr>
      </table>
</div>

<div id="options" class="hidden">
  <br>
    <button id="move" name="move-marker" class="btn">Move</button>
    <br>
    <button id="location-delete" name="delete-marker" class="btn">Delete</button>
  </div>
   
   
<script>
// Initializing variables
      var map;
      var marker;
      var locationInfoWindow;
      var messagewindow;
      var zoom = 17;

// Check if the logged in user is an admin or a tent manager
    <% if current_user || current_user && current_user.permission_level > 1 %> // NOTE: add the conditional checking for event admin status

  // Initializes the map
        function initMap() {
        // Checking if this map is for an avent
        <% if @event && @account && !@location %>

        var target = {lat: <%= @event.latitude || @account.latitude %>, lng: <%= @event.longitude || @account.longitude %>};
        console.log("Displaying Current Event location at: " + target);
        // Checking if this is just account location setup
        <% elsif @event && @location %>
        zoom = 20;
        var target = {lat: <%= @location.latitude %>, lng: <%= @location.longitude %>};

        console.log("Displaying Current location at: " + target);
        // Checking if this is customer
        <% elsif @account && @customer%>

        var target = {lat: <%= @customer.latitude || @account.latitude %>, lng: <%= @customer.longitude || @account.longitude %>};
        console.log("Displaying Current customer location at: " + target);
        // Checking if this is the home screen
         // Checking if this is customer
        <% elsif @account %>

        var target = {lat: <%= @account.latitude %>, lng: <%= @account.longitude %>};
        zoom = 20;
        console.log("Displaying Current account location at: " + target);
        // Checking if this is the home screen
        <% else %>

        var target = {lat: <%= 0.0 %>, lng: <%= 0.0 %>};
        console.log("Default target set at: 0,0 in super admin view");
        <% end %>

        // MAP
        map = new google.maps.Map(document.getElementById('map'), {
          center: target,
          zoom: zoom,
          mapTypeId: 'terrain',
          streetViewControl: true
        });

        map.setTilt(45)

       // Info Window for Form
       locationInfoWindow = new google.maps.InfoWindow({
          content: document.getElementById('form')
        });



      // Info Window for Message
       messagewindow = new google.maps.InfoWindow({
          content: document.getElementById('message')
        });
    var options = document.getElementById('options');
      var infowindow = new google.maps.InfoWindow({
          content: options
        });

      // Custom Marker
      var locIcon = {
          url: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png',
          // This marker is 20 pixels wide by 32 pixels high.
          size: new google.maps.Size(20, 32),
          // The origin for this image is (0, 0).
          origin: new google.maps.Point(0, 0),
          // The anchor for this image is the base of the flagpole at (0, 32).
          anchor: new google.maps.Point(0, 32)
        };


      // Events
        google.maps.event.addListener(map, 'click', function(event) {
          console.log(event.latLng, "Lat lng")
                marker = new google.maps.Marker({
                  position: event.latLng,
                  map: map,
                  icon: locIcon,
                  animation: google.maps.Animation.DROP,
                  draggable: false})


                // Add Event Listener to marker when created.
                google.maps.event.addListener(marker, 'click', function() {
                  locationInfoWindow.open(map, marker);
                  makeVisible(document.getElementById('form'));

                });
                google.maps.event.addListener(marker, 'dblclick', function() {
                  console.dir(locationInfoWindow);
                  console.dir(marker);
                  marker.setMap(null);

                });
          });


        // Set Submit button to a variable. NOTE: use jQuery
        var locationSubmit = document.getElementById('location-submit');
        var saveAndExit = document.getElementById('save-location-exit');

     
  <% if @event %>

    // Add Event Listener to button
      locationSubmit.addEventListener('click', saveMarkerLocation);
      saveAndExit.addEventListener('click',  saveMarkerAndExit)
      var eventId = "<%= @event.id %>";
      var eventLocURL = `/events/${eventId}/locations`;
      var eventURL = `/events/${eventId}`;
      var mapMarkers = [];

      function fetchMapLocations() {
      return $.ajax({
          url: '/api' + eventLocURL,
          method: 'GET',
          dataType: 'json',
        })
      }

      function fetchLocationById(id) {
        return $.ajax({
          url: '/api' + eventLocURL + '/' + id,
          method: 'GET',
          dataType: 'json',
        })
      }

      function deleteLocation(id) {
        return $.ajax({
          url: eventLocURL + '/' + id,
          method: 'DELETE',
          dataType: 'json',
        })
      }

      function clearField(input) {
        input.value = "";
      }

      function clearform(inputs){
        inputs.forEach(clearField)
      }

      function makeVisible(el){
        el.classList.remove('hidden');
      }

      function hideElement(el){
        el.classList.add('hidden');
      }

      $(document).ready(function loadData() {

  // TO-DO: Send Array of Locations To the array to create a marker for each!
      // var mapMarkers = [];
      var targetMarker;

      var moveMarker = function() {
          var match = ""; // Doesn't stop duplicates
          var dragStatus;
          if(targetMarker.draggable === true){
            dragStatus = false;
          } else {
            dragStatus = true;
          }
          match = getMarker(targetMarker);
          targetMarker.setMap(null);
          // fetch location data by id
             fetchLocationById(match.id).then(function(data){
               console.log(data);
                setMarker(data, true);
          });
        }

      var deleteMarker = function() {
          var match = ""; // Doesn't stop duplicates
          match = getMarker(targetMarker);

          // erase location in database
          try {
            deleteLocation(match.id).then(function() {
              var iterator = mapMarkers.entries();
              for (let entry of iterator) {
                if(entry[1].id === match.id){
                   mapMarkers.splice(entry[0], 1);
                    };
                  }
              }).then(function(){
                targetMarker.setMap(null);
              })
          } catch(err) {
            throw err;
          }

          // remove from marker Array


          // remove Marker from map

        }



        // getMarker(targetMarker) - using targetMarker, find marker data to perform front and back end updates.
 var getMarker = function(clickedMarker) {
   var targetObj = ""; // Doesn't stop duplicates
          // find marker obj in marker array
        var matchMarkerObj = function(obj) {
            if(obj.gmObj === clickedMarker){
              return obj;
            }
        }
        targetObj = mapMarkers.filter(matchMarkerObj)[0];
        return targetObj;
  };

      var attachOptions = function(marker) {
      // Map marker needs to open info window with opts: move or delete
        marker.addListener('click', function() {
          makeVisible(options)
          if(infowindow) {
            infowindow.close();
          }
          infowindow.open(marker.get('map'), marker);
          targetMarker = marker;
          var move = infowindow.content.children.namedItem('move-marker');
          move.addEventListener('click', moveMarker);
          var removeMarker = infowindow.content.children.namedItem('delete-marker');
          removeMarker.addEventListener('click', deleteMarker);
        });

        marker.addListener('dragend', updateMapLocations); // Updates map on marker drag. To-do: create and edit/save button and toggle draggability
      }

// ----- Helper methods -----

  function pinSymbol(type) {
    var colorsByType = {
      bar: '#ff5b03',
      storage: 'gray',
      compound: 'blue',
      truck: 'black'
    }

    var sizeByType = {
      bar: 1,
      compound: 2,
      storage: 1,
      truck: 1
    }

  return {
    path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',
    fillColor: colorsByType[type],
    fillOpacity: 1,
    strokeColor: 'black',
    strokeWeight: 1,
    scale: sizeByType[type],
    labelOrigin: { x: -10, y: 10},
    labelClass: `map-label ${type}`
  };
}

  // googleLatLng(data) - create a google maps latlng position with location's lat and long
    var googleLatLng = function(data) {
      return new google.maps.LatLng(data.latitude, data.longitude);
    };
  // locationMarker(drag) - generate Static Map Marker (drag is a boolean representing draggable)
    var locationMarker = function(data, drag, type) {
      return new google.maps.Marker({
              position: googleLatLng(data),
              label: {
                text: data.title,
                color: 'black',
                fontSize: '2em',
                fontWeight: 'bold',
                fontFamily: 'Roboto Mono'
              },
              map: map,
              draggable: drag,
              icon: pinSymbol(data.loc_type)
          })
    };


// replaces already existing marker by ID in array
  var replaceInArray = function(arr, old, newObj){
    console.log(newObj);
            var i = arr.indexOf(old);
            delete arr[i];
            arr.splice(i, 1, newObj);
            return arr;
          }

// findDuplicate(arr, obj) - searches for same id and returns the existing
var findDuplicate = function(arr, obj) {
  console.log(obj);
  var iterator = arr.entries();
    for (let entry of iterator) {
      if(entry[1].id === obj.id){
        return entry[0];
      };
    }
  };

  // storeMarkerIdInObject() - returns a new marker object with loc.id and markerObj
    var storeMarkerIdInObject = function(data, marker) {
      return {
        id: data.id,
        gmObj: marker
      }
    };
  // indexMarkers() - store new marker Obj in global array
    var indexMarker = function(obj){
      var i = findDuplicate(mapMarkers, obj);
      if(mapMarkers[i] && mapMarkers[i].id === obj.id){
        mapMarkers = replaceInArray(mapMarkers, mapMarkers[i], obj);
      } else {
        mapMarkers.push(obj);
      }
    }

// ----- END Helpers -----


// setMarker takes in a location and creates a mapMarker object and pushes to the global array of mapMarkers
     var setMarker = function(loc, drag){
        var draggable = drag ? drag === true : false;
        // using location data from database, create a new gmMarker
          var markerLoc = locationMarker(loc, draggable);
          attachOptions(markerLoc);
          //console.log(`${markerLoc.label.text} found at ${markerLoc.position}`);
          indexMarker(storeMarkerIdInObject(loc, markerLoc));
          console.log(mapMarkers.length);
          };

// FetchMapLocations returns a promise and then each location gets transformed into a mapMarker object
      fetchMapLocations().then(function(data){
            data.forEach(setMarker);
        })

      }) // end loadData

     var updateLocation = function(obj) {
          $.ajax({
            url: eventLocURL + '/' + obj.id,
            method: 'PATCH',
            dataType: 'json',
            data: {
            location: {
                latitude: obj.gmObj.getPosition().lat(),
                longitude: obj.gmObj.getPosition().lng()
                }
            },
            success: function(data, response) {

            // See what data is coming back
            //console.log(data.id + ": " + data.title + ": " + response);

            // Close modal once successfully saved
            if (response === 'success') {
              //console.log("updated!")
            }
          }
          })
         };

     // Fired when dragging location markers
     function updateMapLocations() {
          mapMarkers.forEach(updateLocation);
       };


      var postMapLocation = function(title, type, loc) {
        if (mapMarkers.length){

        }

        console.dir(loc);
        var latLng = loc.getPosition();
        var mlat = latLng.lat();
        var mlng = latLng.lng();
        $.ajax({
          url: eventLocURL,
          method: 'POST',
          dataType: 'json',
          data: {
            location: {
                title: title,
                latitude: mlat,
                longitude: mlng,
                loc_type: type
                }
            },
            success: function(data, response) {

            // See what data is coming back
            console.log(data.id + ": " + data.title + ": " + response + ": " + data.loc_type);

            // Close modal once successfully saved
            if (response === 'success') {
              locationInfoWindow.close();
              messagewindow.open(map, loc);
            }
          }
        })

      }
      function navigateToEvent() {
        try {
          window.location.replace(eventURL)
        } catch(err){
          throw err
        }
      }

      function saveMarkerLocation() {
      // To-Do: access marker properties and send save
        try {
          var title = document.getElementById('title');
          var locType = document.getElementById('type');
          var titleVal = title.value;
          var locTypeVal = locType.value;
          var url = '/events/<%= @event.id %>/locations';
          postMapLocation(titleVal, locTypeVal, marker);
          clearform([title, locType]);
        } catch(err){
          throw err;
        }
      }

      function saveMarkerAndExit() {
        try {
          saveMarkerLocation();
          navigateToEvent()
        } catch(err) {
          throw err;
        }
      }

      // To-Do: Create Multi Locations before saving AND Save All Locations into an event locations array
      // OR Create Markers on a map, drag them all over and then save an array of markers to the event locations.




    }; // initMap END if @event exists

  <% else %> // if @event
    }; // initMap END if NO @event exists

  <% end %> // if @event


    </script>
    <script async defer src="<%= @google_api_url %>"></script>




  <% end %>




  </body>
</html>
