<!DOCTYPE html>
<html>
  <head>
    <title>Fifo</title>
    <%= csrf_meta_tags %>
    
    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application' %>
   
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <style>

        html {
              background: no-repeat center center fixed;
              -webkit-background-size: cover;
              -moz-background-size: cover;
             -o-background-size: cover;
              background-size: cover;

              }

    #map {

    /* Set up proportionate scaling */
    width: 74vw;
    height: 90vh;

    /* Set up positioning */
  }

        </style>

  </head>



    <body>
      <div class="row">
        <div class = "nav-wrapper">
        <div class="col s3 columnbgrnd" style="height: 100vh;" >
          <img src="http://imageshack.com/a/img922/3479/R0MMsN.png" style="width:128px;height:128px" >
          <a id="nav-map" class="map-toggle zwaves-effect waves-light btn"><i class="material-icons right">map</i>map</a>
          <ul class="slide-out">
    <% if user_signed_in? %>

            <li class="waves-effect waves-light sideLinks">
              <%= link_to 'Home', root_path, class: 'btn sideLinks'%>
            </li>
            <% if current_user.is_event_admin? || current_user.is_crew? %>
            <li class="waves-effect waves-light sideLinks">
            <%= link_to "Items", client_items_path(client_id: current_user.client_id), class: 'btn sideLinks' %>
            </li>
            <% end %>
            <li class="waves-effect waves-light sideLinks">
              <%= link_to 'Edit account', edit_user_registration_path, target: '_self', class: 'btn sideLinks' %>
            </li>
            <li class="waves-effect waves-light sideLinks Events">
              <%= link_to 'Events', client_events_path(client_id: current_user.client_id), id: 'modal-trigger', class: 'btn sideLinks'  %>
            </li>
          <li class="waves-effect waves-light sideLinks  signout">
            <%= link_to 'Sign out', destroy_user_session_path, method: 'delete', target: '_self', class: 'btn sideLinks' %>
          </li>
          <% else %>
            <li class="waves-effect waves-light sideLinks  signup">
            <%= link_to 'Sign Up' , new_user_registration_path, class: 'btn sideLinks' %>
            </li>
            <li class="waves-effect waves-light sideLinks  signin">
            <%= link_to 'Sign In' ,  new_user_session_path, class: 'btn sideLinks' %>
            </li>

            <% end %>




        </ul>
          <div class="footer">

            <section id="footer">
              <ul class="icons text-muted">
                <p>The FiFo Team:</p>
                <li class="center">
                  <a href="https://github.com/hkarambizi" class=""><i class="fa fa-github" aria-hidden="true"></i>
                    <span class="label">Harry Karambizi
                    </span>
                  </a>
                </li>

                <li class="center">
                  <a href="https://github.com/mtorres23" class=""><i class="fa fa-github" aria-hidden="true"></i>
                    <span class="label">Michael Torres</span>
                  </a>
                </li>
                <li class="center">
                  <a href="https://github.com/ddmilo" class=""><i class="fa fa-github" aria-hidden="true"></i>
                    <span class="label">Dan Milo</span>
                  </a>
                </li>
              </ul>
                <p class="copyright text-muted">&copy; FiFo 2017</p>


          </section>
      </div>
      </div>
    </div> <!--bottom of nav wrapper-->

        <!--view port-->
      <div class="col s9" style="height: 100vh;">
        <% if notice %>
             <p class="alert alert-success"><%= notice %></p>
        <% end %>
        <% if alert %>
            <p class="alert alert-danger"><%= alert %></p>
        <% end %>

        <div id="map"></div> <!--map end-->




    <!-- Modal 1 -->
    <div id="modal1" class="modal bottom-sheet">
      <div class="modal-header">
          <a class="modal-action modal-close waves-effect waves-green btn"><i class="material-icons">map</i></a>
      </div>
      <div class="modal-content">
        <%= yield %>
      </div>

    </div> <!--bottom of modal1-->



    <!--modal2-->
    <div id="modal2" class="modal bottom-sheet">
      <div class="modal-header">
        <a href="#" class="modal-action modal-close waves-effect waves-green btn-flat">Modal Header</a>
      </div>
      <div class="modal-content">

      </div>

    </div> <!--bottom of modal2-->

  </div><!--bottom of viewport-->
</div><!--end of col row-->


<div id="form">
      <table>
      <tr><td>Location Title:</td> <td><input type='text' id='title'/> </td> </tr>
      <tr><td>Type:</td> <td><select id='type'> +
                 <option value='bar' SELECTED>bar</option>
                 <option value=‘storage’>storage</option>
                 </select> </td></tr>
                 <tr><td></td><td><input id='location-submit' type='button' value='Save'/></td>
                </tr>
      </table>
</div>

<div id="message">Location saved</div>

<div id="options">
  <br>
    <button id="move" name="move-marker" class="btn">Move</button>
    <br>
    <button id="location-delete" name="delete-marker" class="btn">Delete</button>
  </div>
   
    
<script>
// Initializing variables

      var map;
      var marker;
      var locationInfoWindow;
      var messagewindow;

// Check if the logged in user is an admin or a tent manager
    <% if current_user || current_user && current_user.is_tent_manager? %> // NOTE: add the conditional checking for event admin status

  // Initializes the map
        function initMap() {
        // Checking if this map is for an avent
        <% if @event && @client %>

        var target = {lat: <%= @event.latitude || @client.latitude %>, lng: <%= @event.longitude || @client.longitude %>};
        console.log("Displaying Current Event location at: " + target);
        // Checking if this is just account location setup
        <% elsif @client && @location %>

        var target = {lat: <%= @location.latitude %>, lng: <%= @location.longitude %>};
        console.log("Displaying Current location at: " + target);
        // Checking if this is the home screen
        <% else %>
        var target = {lat: <%= @client.latitude %>, lng: <%= @client.longitude %>};
        console.log("Displaying Client location at: " + target);
        <% end %>

        // MAP    
        map = new google.maps.Map(document.getElementById('map'), {
          center: target,
          zoom: 20
        });
      
       // Info Window for Form
       locationInfoWindow = new google.maps.InfoWindow({
          content: document.getElementById('form')
        });



      // Info Window for Message
       messagewindow = new google.maps.InfoWindow({
          content: document.getElementById('message')
        });
    var options = document.getElementById('options');
      var infowindow = new google.maps.InfoWindow({
          content: options
        });

      // Custom Marker
      var locIcon = {
          url: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png',
          // This marker is 20 pixels wide by 32 pixels high.
          size: new google.maps.Size(20, 32),
          // The origin for this image is (0, 0).
          origin: new google.maps.Point(0, 0),
          // The anchor for this image is the base of the flagpole at (0, 32).
          anchor: new google.maps.Point(0, 32)
        };


      // Events 
        google.maps.event.addListener(map, 'click', function(event) {
                marker = new google.maps.Marker({
                  position: event.latLng,
                  map: map,
                  icon: locIcon,
                  animation: google.maps.Animation.DROP,
                  draggable: false})
                
                
                // Add Event Listener to marker when created.
                google.maps.event.addListener(marker, 'click', function() {
                  locationInfoWindow.open(map, marker);
                  
                  
                });
                google.maps.event.addListener(marker, 'dblclick', function() {
                  console.dir(locationInfoWindow);
                  console.dir(marker);
                  marker.setMap(null);
                  
                });
          });


        // Set Submit button to a variable. NOTE: use jQuery
        var locationSubmit = document.getElementById('location-submit');

      
  <% if @event %>

    // Add Event Listener to button
      locationSubmit.addEventListener('click', saveMarkerLocation);
  
      var eventLocURL = '/events/<%= @event.id %>/locations';
      var mapMarkers = [];

      function fetchMapLocations() {
      return $.ajax({
          url: '/api' + eventLocURL,
          method: 'GET',
          dataType: 'json',
        })
      }
      
      function fetchLocationById(id) {
        return $.ajax({
          url: '/api' + eventLocURL + '/' + id,
          method: 'GET',
          dataType: 'json',
        })
      }

      function deleteLocation(id) {
        return $.ajax({
          url: eventLocURL + '/' + id,
          method: 'DELETE',
          dataType: 'json',
        })
      }

      $(document).ready(function loadData() {
       
  // TO-DO: Send Array of Locations To the array to create a marker for each!
      // var mapMarkers = [];
      var targetMarker;

      var moveMarker = function() {
          var match = ""; // Doesn't stop duplicates
          var dragStatus;
          if(targetMarker.draggable === true){
            dragStatus = false;
          } else { 
            dragStatus = true;
          }
          match = getMarker(targetMarker);
          targetMarker.setMap(null);
          // fetch location data by id
             fetchLocationById(match.id).then(function(data){
               console.log(data);
                setMarker(data, true);
          });
        }

      var deleteMarker = function() {
          var match = ""; // Doesn't stop duplicates
          match = getMarker(targetMarker);

          // erase location in database
          try {
            deleteLocation(match.id).then(function() {
              var iterator = mapMarkers.entries();
              for (let entry of iterator) {
                if(entry[1].id === match.id){
                   mapMarkers.splice(entry[0], 1);
                    };
                  }
              }).then(function(){
                targetMarker.setMap(null);
              })
          } catch(err) {
            throw err;
          }

          // remove from marker Array


          // remove Marker from map
        
        }

        

        // getMarker(targetMarker) - using targetMarker, find marker data to perform front and back end updates.
 var getMarker = function(clickedMarker) {
   var targetObj = ""; // Doesn't stop duplicates
          // find marker obj in marker array
        var matchMarkerObj = function(obj) {
            if(obj.gmObj === clickedMarker){
              return obj;
            }
        }
        targetObj = mapMarkers.filter(matchMarkerObj)[0];
        return targetObj;
  };
      
      var attachOptions = function(marker) {
      // Map marker needs to open info window with opts: move or delete
        marker.addListener('click', function() {
          if(infowindow) {
            infowindow.close();
          }
          infowindow.open(marker.get('map'), marker);
          targetMarker = marker;
          var move = infowindow.content.children.namedItem('move-marker');
          move.addEventListener('click', moveMarker);
          var removeMarker = infowindow.content.children.namedItem('delete-marker');
          removeMarker.addEventListener('click', deleteMarker);
        });

        marker.addListener('dragend', updateMapLocations); // Updates map on marker drag. To-do: create and edit/save button and toggle draggability
      }

// ----- Helper methods -----

  // googleLatLng(data) - create a google maps latlng position with location's lat and long
    var googleLatLng = function(data) {
      return new google.maps.LatLng(data.latitude, data.longitude);
    };
  // locationMarker(drag) - generate Static Map Marker (drag is a boolean representing draggable)
    var locationMarker = function(data, drag) {
      return new google.maps.Marker({
              position: googleLatLng(data),
              label: {
                text: data.title,
                color: 'white',
                fontSize: '32px',
                fontWeight: 'bold'
              },
              map: map,
              draggable: drag
          })
    };


// replaces already existing marker by ID in array
  var replaceInArray = function(arr, old, newObj){
    console.log(newObj);
            var i = arr.indexOf(old);
            delete arr[i];
            arr.splice(i, 1, newObj);
            return arr;
          }

// findDuplicate(arr, obj) - searches for same id and returns the existing
var findDuplicate = function(arr, obj) {
  console.log(obj);
  var iterator = arr.entries();
    for (let entry of iterator) {
      if(entry[1].id === obj.id){
        return entry[0];
      };
    }
  };
  
  // storeMarkerIdInObject() - returns a new marker object with loc.id and markerObj
    var storeMarkerIdInObject = function(data, marker) {
      return {
        id: data.id,
        gmObj: marker
      }
    };
  // indexMarkers() - store new marker Obj in global array
    var indexMarker = function(obj){
      var i = findDuplicate(mapMarkers, obj);
      if(mapMarkers[i] && mapMarkers[i].id === obj.id){
        mapMarkers = replaceInArray(mapMarkers, mapMarkers[i], obj);
      } else {
        mapMarkers.push(obj);
      }
    }

// ----- END Helpers -----


// setMarker takes in a location and creates a mapMarker object and pushes to the global array of mapMarkers
     var setMarker = function(loc, drag){
        var draggable = drag ? drag === true : false;
        // using location data from database, create a new gmMarker
          var markerLoc = locationMarker(loc, draggable);
          attachOptions(markerLoc);
          //console.log(`${markerLoc.label.text} found at ${markerLoc.position}`);
          indexMarker(storeMarkerIdInObject(loc, markerLoc));
          console.log(mapMarkers.length);
          };

// FetchMapLocations returns a promise and then each location gets transformed into a mapMarker object
      fetchMapLocations().then(function(data){
            data.forEach(setMarker);
        })

      }) // end loadData
      
     var updateLocation = function(obj) {
          $.ajax({
            url: eventLocURL + '/' + obj.id,
            method: 'PATCH',
            dataType: 'json',
            data: {
            location: { 
                latitude: obj.gmObj.getPosition().lat(), 
                longitude: obj.gmObj.getPosition().lng()
                }
            },
            success: function(data, response) {
          
            // See what data is coming back
            //console.log(data.id + ": " + data.title + ": " + response);

            // Close modal once successfully saved
            if (response === 'success') {
              //console.log("updated!")
            }
          }
          })
         };

     // Fired when dragging location markers
     function updateMapLocations() {
          mapMarkers.forEach(updateLocation);
       };

  
      var postMapLocation = function(title, loc) {
        if (mapMarkers.length){
          
        }
        
        console.dir(loc);
        var latLng = loc.getPosition();
        var mlat = latLng.lat();
        var mlng = latLng.lng(); 
        $.ajax({
          url: eventLocURL, 
          method: 'POST',
          dataType: 'json',
          data: {
            location: {
                title: title, 
                latitude: mlat, 
                longitude: mlng
                }
            },
            success: function(data, response) {
          
            // See what data is coming back
            console.log(data.id + ": " + data.title + ": " + response);

            // Close modal once successfully saved
            if (response === 'success') {
              locationInfoWindow.close();
              messagewindow.open(map, loc);
            }
          }
        })

      }
      function saveMarkerLocation() {
      // To-Do: access marker properties and send save
        try {
          var title = document.getElementById('title').value;
        var url = '/events/<%= @event.id %>/locations';
        } catch(err){
          throw err;
        } finally {
          postMapLocation(title, marker);
        }
        
      } // saveData END

      // To-Do: Create Multi Locations before saving AND Save All Locations into an event locations array
      // OR Create Markers on a map, drag them all over and then save an array of markers to the event locations. 


  

    }; // initMap END if @event exists

  <% else %> // if @event
    }; // initMap END if NO @event exists

  <% end %> // if @event


    </script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAhF2K8TKtEZ04zw7i3FMKQLwvv-bWC79g&callback=initMap"></script>
    
    };

  <%= yield %>
  <% end %> // if current_user
 };

 };

  </body>
</html>
